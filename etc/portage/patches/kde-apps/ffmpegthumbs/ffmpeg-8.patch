From d39fae995420d5b78d40a51a5a748c1ecd74a0ee Mon Sep 17 00:00:00 2001
From: Azhar Momin <azhar-momin@outlook.com>
Date: Sun, 24 Aug 2025 15:50:28 +0530
Subject: [PATCH 1/3] Some cleanup and fix deprecation warnings

---
 CMakeLists.txt                        |  8 ++++----
 ffmpegthumbnailer.cpp                 |  4 ----
 ffmpegthumbnailer/filmstripfilter.cpp | 11 ++++-------
 ffmpegthumbnailer/moviedecoder.cpp    | 16 ++++++++--------
 tests/CMakeLists.txt                  |  6 +++---
 5 files changed, 19 insertions(+), 26 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index d794347..696c33e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -25,7 +25,7 @@ include(ECMDeprecationSettings)
 
 find_package(Qt6 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS Core Gui)
 find_package(KF6 ${KF_MIN_VERSION} REQUIRED COMPONENTS KIO Config)
-find_package(FFmpeg COMPONENTS AVCODEC AVFORMAT SWSCALE)
+find_package(FFmpeg REQUIRED COMPONENTS AVCODEC AVFORMAT SWSCALE)
 
 include_directories(
     ${FFMPEG_INCLUDE_DIRS}
@@ -69,15 +69,15 @@ kconfig_add_kcfg_files(ffmpegthumbs ffmpegthumbnailersettings5.kcfgc)
 target_link_libraries(ffmpegthumbs
     Qt::Core
     Qt::Gui
-    KF6::KIOWidgets
     KF6::KIOCore
+    KF6::KIOGui
     KF6::ConfigCore
     KF6::ConfigGui
-    ${AVUTIL_LIBRARIES}
     ${AVFILTER_LIBRARIES}
+    ${SWSCALE_LIBRARIES}
     ${AVFORMAT_LIBRARIES}
     ${AVCODEC_LIBRARIES}
-    ${SWSCALE_LIBRARIES}
+    ${AVUTIL_LIBRARIES}
 )
 
 install(FILES ffmpegthumbnailersettings5.kcfg DESTINATION ${KDE_INSTALL_KCFGDIR})
diff --git a/ffmpegthumbnailer.cpp b/ffmpegthumbnailer.cpp
index 40bf1be..8db7629 100644
--- a/ffmpegthumbnailer.cpp
+++ b/ffmpegthumbnailer.cpp
@@ -12,11 +12,7 @@
 #include <limits>
 
 #include <KPluginFactory>
-#include <QCheckBox>
-#include <QFormLayout>
 #include <QImage>
-#include <QLineEdit>
-#include <QSpinBox>
 
 extern "C" {
 #include <libavformat/avformat.h>
diff --git a/ffmpegthumbnailer/filmstripfilter.cpp b/ffmpegthumbnailer/filmstripfilter.cpp
index 52af220..b523717 100644
--- a/ffmpegthumbnailer/filmstripfilter.cpp
+++ b/ffmpegthumbnailer/filmstripfilter.cpp
@@ -10,16 +10,13 @@
 namespace ffmpegthumbnailer
 {
 
-static const int FILMHOLE_WIDTH = 12;
-static const int FILMHOLE_HEIGHT = 10;
-
 static const quint8* determineFilmStrip(quint32 videoWidth, quint32& filmStripWidth, quint32& filmStripHeight)
 {
     if (videoWidth <= SMALLEST_FILM_STRIP_WIDTH * 2)
     {
         return nullptr;
     }
-    
+
     if (videoWidth <= 96)
     {
         filmStripWidth = filmStripHeight = 4;
@@ -55,12 +52,12 @@ void FilmStripFilter::process(VideoFrame& videoFrame)
     quint32 filmStripWidth;
     quint32 filmStripHeight;
     const quint8* filmHole = determineFilmStrip(videoFrame.width, filmStripWidth, filmStripHeight);
-    
+
     if (!filmHole)
     {
         return;
     }
-    
+
     int frameIndex = 0;
     int filmHoleIndex = 0;
     int offset = (videoFrame.width * 3) - 3;
@@ -81,7 +78,7 @@ void FilmStripFilter::process(VideoFrame& videoFrame)
         }
         frameIndex += videoFrame.lineSize;
         filmHoleIndex = (i % filmStripHeight) * filmStripWidth * 3;
-    }   
+    }
 }
 
 }
diff --git a/ffmpegthumbnailer/moviedecoder.cpp b/ffmpegthumbnailer/moviedecoder.cpp
index 39a7c00..21c3864 100644
--- a/ffmpegthumbnailer/moviedecoder.cpp
+++ b/ffmpegthumbnailer/moviedecoder.cpp
@@ -89,7 +89,7 @@ void MovieDecoder::destroy()
 {
     deleteFilterGraph();
     if (m_pVideoCodecContext) {
-        avcodec_close(m_pVideoCodecContext);
+        avcodec_free_context(&m_pVideoCodecContext);
         m_pVideoCodecContext = nullptr;
     }
     m_pVideoStream = nullptr;
@@ -215,7 +215,7 @@ void MovieDecoder::seek(int timeInSeconds)
         }
 
         ++keyFrameAttempts;
-    } while ((!gotFrame || !m_pFrame->key_frame) && keyFrameAttempts < 200);
+    } while ((!gotFrame || !(m_pFrame->flags & AV_FRAME_FLAG_KEY)) && keyFrameAttempts < 200);
 
     if (gotFrame == 0) {
         qCDebug(ffmpegthumbs_LOG) << "Seeking in video failed";
@@ -263,15 +263,15 @@ QImageIOHandler::Transformations MovieDecoder::transformations()
         return ret;
     }
 
-    for (int i=0; i<m_pVideoStream->nb_side_data; i++) {
-        if (m_pVideoStream->side_data[i].type != AV_PKT_DATA_DISPLAYMATRIX) {
+    for (int i=0; i<m_pVideoStream->codecpar->nb_coded_side_data; i++) {
+        if (m_pVideoStream->codecpar->coded_side_data[i].type != AV_PKT_DATA_DISPLAYMATRIX) {
             continue;
         }
-        if (m_pVideoStream->side_data[i].size != sizeof(int32_t) * 9) {
-            qCWarning(ffmpegthumbs_LOG) << "Invalid display matrix size" << m_pVideoStream->side_data[i].size << "expected" << sizeof(int32_t) * 9;
+        if (m_pVideoStream->codecpar->coded_side_data[i].size != sizeof(int32_t) * 9) {
+            qCWarning(ffmpegthumbs_LOG) << "Invalid display matrix size" << m_pVideoStream->codecpar->coded_side_data[i].size << "expected" << sizeof(int32_t) * 9;
             continue;
         }
-        int32_t *matrix = reinterpret_cast<int32_t*>(m_pVideoStream->side_data[i].data);
+        int32_t *matrix = reinterpret_cast<int32_t*>(m_pVideoStream->codecpar->coded_side_data[i].data);
         double rotation = av_display_rotation_get(matrix);
         if (qFuzzyCompare(rotation, 0.)) {
             ret |= QImageIOHandler::TransformationNone;
@@ -404,7 +404,7 @@ bool MovieDecoder::processFilterGraph(AVFrame *dst, const AVFrame *src,
 
 void MovieDecoder::getScaledVideoFrame(int scaledSize, bool maintainAspectRatio, VideoFrame& videoFrame)
 {
-    if (m_pFrame->interlaced_frame) {
+    if (m_pFrame->flags & AV_FRAME_FLAG_INTERLACED) {
         processFilterGraph((AVFrame*) m_pFrame, (AVFrame*) m_pFrame, m_pVideoCodecContext->pix_fmt,
                               m_pVideoCodecContext->width, m_pVideoCodecContext->height);
     }
diff --git a/tests/CMakeLists.txt b/tests/CMakeLists.txt
index 6d9cb54..52dbd97 100644
--- a/tests/CMakeLists.txt
+++ b/tests/CMakeLists.txt
@@ -24,13 +24,13 @@ target_include_directories(ffmpegthumbtest PRIVATE ..)
 target_link_libraries(ffmpegthumbtest
     Qt::Core
     Qt::Gui
-    KF6::KIOWidgets
     KF6::KIOCore
+    KF6::KIOGui
     KF6::ConfigCore
     KF6::ConfigGui
-    ${AVUTIL_LIBRARIES}
     ${AVFILTER_LIBRARIES}
+    ${SWSCALE_LIBRARIES}
     ${AVFORMAT_LIBRARIES}
     ${AVCODEC_LIBRARIES}
-    ${SWSCALE_LIBRARIES}
+    ${AVUTIL_LIBRARIES}
 )
-- 
GitLab


From b6b528a5299f1b1f3caceb48b3d2abe01baaba62 Mon Sep 17 00:00:00 2001
From: Azhar Momin <azhar-momin@outlook.com>
Date: Mon, 25 Aug 2025 09:13:38 +0530
Subject: [PATCH 2/3] Integrate FFMpeg Thumbs into OSS-Fuzz

---
 CMakeLists.txt                                |  7 +++
 autotests/ossfuzz/CMakeLists.txt              | 47 +++++++++++++++
 autotests/ossfuzz/build_fuzzers.sh            | 59 +++++++++++++++++++
 .../ossfuzz/kde_thumbnailers_fuzzer.cc.in     | 53 +++++++++++++++++
 autotests/ossfuzz/prepare_build.sh            |  9 +++
 5 files changed, 175 insertions(+)
 create mode 100644 autotests/ossfuzz/CMakeLists.txt
 create mode 100755 autotests/ossfuzz/build_fuzzers.sh
 create mode 100644 autotests/ossfuzz/kde_thumbnailers_fuzzer.cc.in
 create mode 100755 autotests/ossfuzz/prepare_build.sh

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 696c33e..410bed6 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -23,6 +23,9 @@ include(ECMQtDeclareLoggingCategory)
 include(FeatureSummary)
 include(ECMDeprecationSettings)
 
+option(BUILD_FUZZERS "Whether to the thumbnail build fuzzers" OFF)
+option(FUZZERS_USE_QT_MINIMAL_INTEGRATION_PLUGIN "Whether to use the Qt minimal integration plugin for fuzzers" OFF)
+
 find_package(Qt6 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS Core Gui)
 find_package(KF6 ${KF_MIN_VERSION} REQUIRED COMPONENTS KIO Config)
 find_package(FFmpeg REQUIRED COMPONENTS AVCODEC AVFORMAT SWSCALE)
@@ -96,4 +99,8 @@ if(BUILD_TESTING)
     add_subdirectory(tests)
 endif()
 
+if(BUILD_FUZZERS)
+    add_subdirectory(autotests/ossfuzz)
+endif()
+
 feature_summary(WHAT ALL FATAL_ON_MISSING_REQUIRED_PACKAGES)
diff --git a/autotests/ossfuzz/CMakeLists.txt b/autotests/ossfuzz/CMakeLists.txt
new file mode 100644
index 0000000..54f9be3
--- /dev/null
+++ b/autotests/ossfuzz/CMakeLists.txt
@@ -0,0 +1,47 @@
+# SPDX-FileCopyrightText: 2025 Azhar Momin <azhar.momin@kdemail.net>
+# SPDX-License-Identifier: BSD-2-Clause
+
+if(DEFINED ENV{LIB_FUZZING_ENGINE})
+    set(fuzzing_engine $ENV{LIB_FUZZING_ENGINE})
+else()
+    if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+        set(fuzzing_engine -fsanitize=fuzzer)
+    else()
+        message(FATAL_ERROR "Fuzzing engine not supported")
+    endif()
+endif()
+
+function(add_thumbnail_fuzzer creator creator_header target_lib)
+    set(gen_src ${CMAKE_CURRENT_BINARY_DIR}/${target_lib}_fuzzer.cc)
+    set(CREATOR "${creator}")
+    set(CREATOR_HEADER "${creator_header}")
+    configure_file(
+        ${CMAKE_CURRENT_SOURCE_DIR}/kde_thumbnailers_fuzzer.cc.in
+        ${gen_src}
+        @ONLY
+    )
+
+    add_executable(${target_lib}_fuzzer
+        ${gen_src}
+    )
+
+    kcoreaddons_target_static_plugins(${target_lib}_fuzzer
+        LINK_OPTION PRIVATE
+        TARGETS ${target_lib}
+    )
+
+    target_link_libraries(${target_lib}_fuzzer
+        PRIVATE
+            ${fuzzing_engine}
+    )
+
+    if(FUZZERS_USE_QT_MINIMAL_INTEGRATION_PLUGIN)
+        qt_import_plugins(${target_lib}_fuzzer INCLUDE Qt::QMinimalIntegrationPlugin)
+    endif()
+
+    set_target_properties(${target_lib}_fuzzer PROPERTIES
+        RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/fuzzers
+    )
+endfunction()
+
+add_thumbnail_fuzzer(FFMpegThumbnailer ffmpegthumbnailer.h ffmpegthumbs)
diff --git a/autotests/ossfuzz/build_fuzzers.sh b/autotests/ossfuzz/build_fuzzers.sh
new file mode 100755
index 0000000..9f0b74b
--- /dev/null
+++ b/autotests/ossfuzz/build_fuzzers.sh
@@ -0,0 +1,59 @@
+#!/bin/bash -eu
+#
+# SPDX-FileCopyrightText: 2025 Azhar Momin <azhar.momin@kdemail.net>
+# SPDX-License-Identifier: LGPL-2.0-or-later
+#
+# This script must be run after kio-extras/thumbnail/autotests/ossfuzz/build_fuzzers.sh
+
+export PATH="$WORK/bin:$WORK/libexec:$PATH"
+export PKG_CONFIG="$(which pkg-config) --static"
+export PKG_CONFIG_PATH="$WORK/lib/pkgconfig:$WORK/share/pkgconfig:$WORK/lib/x86_64-linux-gnu/pkgconfig"
+
+# For FFMpegThumbnailer
+cd $SRC/ffmpeg
+if [ "$SANITIZER" = "memory" ]; then
+  disable_asm="--disable-inline-asm --disable-x86asm"
+else
+  disable_asm=
+fi
+./configure \
+  --cc="$CC" \
+  --cxx="$CXX" \
+  --ld="$CXX $CXXFLAGS -std=c++11" \
+  --prefix=$WORK \
+  $disable_asm \
+  --enable-static \
+  --disable-shared \
+  --disable-doc \
+  --disable-everything \
+  --disable-programs \
+  --disable-avdevice \
+  --disable-swresample \
+  --enable-avfilter \
+  --enable-swscale \
+  --enable-avformat \
+  --enable-avcodec \
+  --enable-avutil
+make install -j$(nproc)
+
+# Build FFMpegThumbs
+cd $SRC/ffmpegthumbs
+cmake -B build -G Ninja \
+    -DCMAKE_PREFIX_PATH=$WORK \
+    -DCMAKE_INSTALL_PREFIX=$WORK \
+    -DBUILD_FUZZERS=ON \
+    -DFUZZERS_USE_QT_MINIMAL_INTEGRATION_PLUGIN=ON \
+    -DBUILD_SHARED_LIBS=OFF
+ninja -C build -j$(nproc)
+
+EXTENSIONS="ffmpegthumbs_fuzzer ogg wma wmv mp4 mkv webm avi mov flv m3u8"
+
+echo "$EXTENSIONS" | while read fuzzer_name extensions; do
+    # copy the fuzzer binary
+    cp build/bin/fuzzers/$fuzzer_name $OUT
+
+    # create seed corpus
+    for extension in $extensions; do
+        find . -name "*.$extension" -exec zip -q "$OUT/${fuzzer_name}_seed_corpus.zip" {} +
+    done
+done
diff --git a/autotests/ossfuzz/kde_thumbnailers_fuzzer.cc.in b/autotests/ossfuzz/kde_thumbnailers_fuzzer.cc.in
new file mode 100644
index 0000000..af90927
--- /dev/null
+++ b/autotests/ossfuzz/kde_thumbnailers_fuzzer.cc.in
@@ -0,0 +1,53 @@
+/*
+ * SPDX-FileCopyrightText: 2025 Azhar Momin <azhar.momin@kdemail.net>
+ * SPDX-License-Identifier: LGPL-2.0-or-later
+ */
+
+#include <QByteArray>
+#include <QGuiApplication>
+#include <QMimeDatabase>
+#include <QSize>
+#include <QTemporaryFile>
+#include <QUrl>
+#include <QVariant>
+
+#include "@CREATOR_HEADER@"
+
+static void runThumbnailer(const QString &fileName, const QString &mimetype)
+{
+    QSize targetSize(128, 128);
+    qreal dpr = 1.0;
+    float sequenceIndex = 0.0f;
+
+    KIO::ThumbnailRequest request(QUrl::fromLocalFile(fileName), targetSize, mimetype, dpr, sequenceIndex);
+
+    @CREATOR@ thumbnailer(nullptr, {});
+    thumbnailer.create(request);
+}
+
+extern "C" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size)
+{
+    int argc = 0;
+    QGuiApplication app(argc, nullptr);
+
+    QByteArray b(reinterpret_cast<const char *>(data), static_cast<int>(size));
+
+    QTemporaryFile f;
+    if (!f.open()) {
+        return 0;
+    }
+    f.write(b);
+    f.close();
+
+    QMimeDatabase mimeDb;
+    QMimeType mimetype = mimeDb.mimeTypeForData(b);
+
+    runThumbnailer(f.fileName(), mimetype.name());
+    for (const QString &ancestor : mimetype.allAncestors()) {
+        if (ancestor != QLatin1String("application/octet-stream")) {
+            runThumbnailer(f.fileName(), ancestor);
+        }
+    }
+
+    return 0;
+}
diff --git a/autotests/ossfuzz/prepare_build.sh b/autotests/ossfuzz/prepare_build.sh
new file mode 100755
index 0000000..d373e05
--- /dev/null
+++ b/autotests/ossfuzz/prepare_build.sh
@@ -0,0 +1,9 @@
+#!/bin/bash -eu
+#
+# SPDX-FileCopyrightText: 2025 Azhar Momin <azhar.momin@kdemail.net>
+# SPDX-License-Identifier: LGPL-2.0-or-later
+
+apt-get install -y nasm
+
+# For FFMpegThumbnailer
+git clone --depth 1 https://git.ffmpeg.org/ffmpeg.git
-- 
GitLab


From 953eff3b3a59f36dc3da6bf964f006b5238fa55e Mon Sep 17 00:00:00 2001
From: Azhar Momin <azhar-momin@outlook.com>
Date: Tue, 26 Aug 2025 12:54:40 +0530
Subject: [PATCH 3/3] Require libavcodec >= 60.30, libavutil >= 58.7, support
 per-component version checks

---
 CMakeLists.txt         |  4 +-
 cmake/FindFFmpeg.cmake | 89 +++++++++++++++++++++++++++---------------
 2 files changed, 60 insertions(+), 33 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 410bed6..843799e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -28,7 +28,9 @@ option(FUZZERS_USE_QT_MINIMAL_INTEGRATION_PLUGIN "Whether to use the Qt minimal
 
 find_package(Qt6 ${QT_MIN_VERSION} CONFIG REQUIRED COMPONENTS Core Gui)
 find_package(KF6 ${KF_MIN_VERSION} REQUIRED COMPONENTS KIO Config)
-find_package(FFmpeg REQUIRED COMPONENTS AVCODEC AVFORMAT SWSCALE)
+find_package(FFmpeg 60.30 REQUIRED COMPONENTS AVCODEC)
+find_package(FFmpeg 58.7 REQUIRED COMPONENTS AVUTIL)
+find_package(FFmpeg REQUIRED COMPONENTS AVFILTER AVFORMAT SWSCALE)
 
 include_directories(
     ${FFMPEG_INCLUDE_DIRS}
diff --git a/cmake/FindFFmpeg.cmake b/cmake/FindFFmpeg.cmake
index 9dc80ef..1c479be 100644
--- a/cmake/FindFFmpeg.cmake
+++ b/cmake/FindFFmpeg.cmake
@@ -7,33 +7,53 @@
 #  FFMPEG_LIBRARIES     - Link these to use the required ffmpeg components.
 #  FFMPEG_DEFINITIONS   - Compiler switches required for using the required ffmpeg components.
 #
-# For each of the components it will additionally set.
+# For each of the components
 #   - AVCODEC
+#   - AVFILTER
 #   - AVDEVICE
 #   - AVFORMAT
 #   - AVUTIL
 #   - POSTPROCESS
 #   - SWSCALE
-# the following variables will be defined
+# the following variables will be defined:
 #  <component>_FOUND        - System has <component>
 #  <component>_INCLUDE_DIRS - Include directory necessary for using the <component> headers
 #  <component>_LIBRARIES    - Link these to use <component>
 #  <component>_DEFINITIONS  - Compiler switches required for using <component>
 #  <component>_VERSION      - The components version
 #
+# As the versions of the various FFmpeg components differ for a given release,
+# and CMake supports only one common version for all components, use the
+# following to specify required versions for multiple components:
+#
+# find_package(FFmpeg 57.48 COMPONENTS AVCODEC)
+# find_package(FFmpeg 57.40 COMPONENTS AVFORMAT)
+# find_package(FFmpeg 55.27 COMPONENTS AVUTIL)
+#
 # SPDX-FileCopyrightText: 2006 Matthias Kretz <kretz@kde.org>
 # SPDX-FileCopyrightText: 2008 Alexander Neundorf <neundorf@kde.org>
 # SPDX-FileCopyrightText: 2011 Michael Jansen <kde@michael-jansen.biz>
-#
+# SPDX-FileCopyrightText: 2021 Stefan Brüns <stefan.bruens@rwth-aachen.de>
 # SPDX-License-Identifier: BSD-3-Clause
 
 include(FindPackageHandleStandardArgs)
 
-# The default components were taken from a survey over other FindFFMPEG.cmake files
 if (NOT FFmpeg_FIND_COMPONENTS)
+  # The default components were taken from a survey over other FindFFMPEG.cmake files
   set(FFmpeg_FIND_COMPONENTS AVCODEC AVFORMAT AVUTIL)
 endif ()
 
+list(LENGTH FFmpeg_FIND_COMPONENTS _numComponents)
+if ((${_numComponents} GREATER 1) AND DEFINED ${FFmpeg_FIND_VERSION})
+  message(WARNING "Using a required version in combination with multiple COMPONENTS is not supported")
+  set(_FFmpeg_REQUIRED_VERSION 0)
+elseif (DEFINED FFmpeg_FIND_VERSION)
+  set(_FFmpeg_REQUIRED_VERSION ${FFmpeg_FIND_VERSION})
+else ()
+  set(_FFmpeg_REQUIRED_VERSION 0)
+endif ()
+set(_FFmpeg_ALL_COMPONENTS AVCODEC AVDEVICE AVFORMAT AVUTIL POSTPROCESS SWSCALE)
+
 #
 ### Macro: set_component_found
 #
@@ -41,10 +61,8 @@ endif ()
 #
 macro(set_component_found _component )
   if (${_component}_LIBRARIES AND ${_component}_INCLUDE_DIRS)
-    # message(STATUS "  - ${_component} found.")
     set(${_component}_FOUND TRUE)
-  else ()
-    # message(STATUS "  - ${_component} not found.")
+    set(FFmpeg_${_component}_FOUND TRUE)
   endif ()
 endmacro()
 
@@ -61,22 +79,22 @@ macro(find_component _component _pkgconfig _library _header)
      # in the FIND_PATH() and FIND_LIBRARY() calls
      find_package(PkgConfig)
      if (PKG_CONFIG_FOUND)
-       pkg_check_modules(PC_${_component} ${_pkgconfig})
+       pkg_check_modules(PC_${_component} QUIET ${_pkgconfig})
      endif ()
   endif (NOT WIN32)
 
   find_path(${_component}_INCLUDE_DIRS ${_header}
     HINTS
-      ${PC_${_component}_INCLUDEDIR}
-      ${PC_${_component}_INCLUDE_DIRS}
+      ${PC_LIB${_component}_INCLUDEDIR}
+      ${PC_LIB${_component}_INCLUDE_DIRS}
     PATH_SUFFIXES
       ffmpeg
   )
 
   find_library(${_component}_LIBRARIES NAMES ${_library}
       HINTS
-      ${PC_${_component}_LIBDIR}
-      ${PC_${_component}_LIBRARY_DIRS}
+      ${PC_LIB${_component}_LIBDIR}
+      ${PC_LIB${_component}_LIBRARY_DIRS}
   )
 
   set(${_component}_DEFINITIONS  ${PC_${_component}_CFLAGS_OTHER} CACHE STRING "The ${_component} CFLAGS.")
@@ -92,28 +110,24 @@ macro(find_component _component _pkgconfig _library _header)
 
 endmacro()
 
-
 # Check for cached results. If there are skip the costly part.
 if (NOT FFMPEG_LIBRARIES)
 
   # Check for all possible component.
-  find_component(AVCODEC  libavcodec  avcodec  libavcodec/avcodec.h)
-  find_component(AVFILTER libavfilter avfilter libavfilter/avfilter.h)
-  find_component(AVFORMAT libavformat avformat libavformat/avformat.h)
-  find_component(AVDEVICE libavdevice avdevice libavdevice/avdevice.h)
-  find_component(AVUTIL   libavutil   avutil   libavutil/avutil.h)
-  find_component(SWSCALE  libswscale  swscale  libswscale/swscale.h)
-  find_component(POSTPROC libpostproc postproc libpostproc/postprocess.h)
+  find_component(AVCODEC     libavcodec  avcodec  libavcodec/avcodec.h)
+  find_component(AVFILTER     libavfilter avfilter libavfilter/avfilter.h)
+  find_component(AVFORMAT    libavformat avformat libavformat/avformat.h)
+  find_component(AVDEVICE    libavdevice avdevice libavdevice/avdevice.h)
+  find_component(AVUTIL      libavutil   avutil   libavutil/avutil.h)
+  find_component(SWSCALE     libswscale  swscale  libswscale/swscale.h)
+  find_component(POSTPROCESS libpostproc postproc libpostproc/postprocess.h)
 
   # Check if the required components were found and add their stuff to the FFMPEG_* vars.
-  foreach (_component ${FFmpeg_FIND_COMPONENTS})
+  foreach (_component ${_FFmpeg_ALL_COMPONENTS})
     if (${_component}_FOUND)
-      # message(STATUS "Required component ${_component} present.")
       set(FFMPEG_LIBRARIES   ${FFMPEG_LIBRARIES}   ${${_component}_LIBRARIES})
       set(FFMPEG_DEFINITIONS ${FFMPEG_DEFINITIONS} ${${_component}_DEFINITIONS})
       list(APPEND FFMPEG_INCLUDE_DIRS ${${_component}_INCLUDE_DIRS})
-    else ()
-      # message(STATUS "Required component ${_component} missing.")
     endif ()
   endforeach ()
 
@@ -131,18 +145,29 @@ if (NOT FFMPEG_LIBRARIES)
                    FFMPEG_LIBRARIES
                    FFMPEG_DEFINITIONS)
 
+else ()
+  # Set the noncached _FOUND vars for the components.
+  foreach (_component ${_FFmpeg_ALL_COMPONENTS})
+    set_component_found(${_component})
+  endforeach ()
 endif ()
 
-# Now set the noncached _FOUND vars for the components.
-foreach (_component AVCODEC AVDEVICE AVFORMAT AVUTIL POSTPROCESS SWSCALE)
-  set_component_found(${_component})
-endforeach ()
-
 # Compile the list of required vars
-set(_FFmpeg_REQUIRED_VARS FFMPEG_LIBRARIES FFMPEG_INCLUDE_DIRS)
+unset(_FFmpeg_REQUIRED_VARS)
+set(_FFmpeg_FOUND_LIBRARIES "")
 foreach (_component ${FFmpeg_FIND_COMPONENTS})
-  list(APPEND _FFmpeg_REQUIRED_VARS ${_component}_LIBRARIES ${_component}_INCLUDE_DIRS)
+  if (${_component}_FOUND)
+    if (${_component}_VERSION VERSION_LESS _FFmpeg_REQUIRED_VERSION)
+      message(STATUS "${_component}: ${${_component}_VERSION} < ${_FFmpeg_REQUIRED_VERSION}")
+      unset(${_component}_FOUND)
+    endif ()
+    list(APPEND _FFmpeg_FOUND_LIBRARIES ${${_component}_LIBRARIES})
+  endif ()
+  list(APPEND _FFmpeg_REQUIRED_VARS ${_component}_LIBRARIES ${_component}_INCLUDE_DIRS ${_component}_FOUND)
 endforeach ()
+list(INSERT _FFmpeg_REQUIRED_VARS 0 _FFmpeg_FOUND_LIBRARIES)
 
 # Give a nice error message if some of the required vars are missing.
-find_package_handle_standard_args(FFmpeg DEFAULT_MSG ${_FFmpeg_REQUIRED_VARS})
+find_package_handle_standard_args(FFmpeg
+    REQUIRED_VARS ${_FFmpeg_REQUIRED_VARS}
+    HANDLE_COMPONENTS)
-- 
GitLab

